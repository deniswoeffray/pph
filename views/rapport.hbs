{{#> baseLayout }}
    {{#*inline "content-block"}}
        <div class="container">
        <h1 class="mb-4">Rapport - {{code}}</h1>


            <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" id="participation" data-toggle="tab" href="#participation-labels" role="tab" aria-controls="participation-labels" aria-selected="true">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="satisfaction" data-toggle="tab" href="#satisfaction-labels" role="tab" aria-controls="satisfaction-labels" aria-selected="false">Profile</a>
                </li>

            </ul>
            <br>

            <canvas id="myChart"></canvas>

            <div class="tab-content" id="myTabContent">
                <div class="tab-pane fade show active" id="participation-labels" role="tabpanel" aria-labelledby="participation-tab">
                    <div class="legend green"></div> Bonne participation <br>
                    <div class="legend orange"></div> Moyenne participation<br>
                    <div class="legend red"></div> Faible participation<br>
                    <div class="legend lightblue"></div> Non réalisé<br>
                    <div class="legend gray"></div> Non applicable<br>



                </div>
                <div class="tab-pane fade" id="satisfaction-labels" role="tabpanel" aria-labelledby="satisfaction-tab">
                    <div class="legend green"></div> Satisfait<br>
                    <div class="legend orange"></div> +/- satisfait<br>
                    <div class="legend red"></div> Pas satisfait<br>
                    <div class="legend gray"></div> Satisfaction indéfinie<br>
                </div>
            </div>
            <br>
        </div>
    {{/inline}}
    {{#*inline "scripts-block"}}
        <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.min.js"></script>

        <script>
            var data = [];
            data.categories = [];

                {{#each reponses}}
                if (data.categories.indexOf("{{this.Question.Categorie.name}}") == -1) {
                    data.categories.push("{{this.Question.Categorie.name}}");
                }
                {{/each}}

            data.categoriesValues = [];
            satisfactionValues = [];
                {{#each reponses}}
                //if the category is empty of values
                if(data.categoriesValues[data.categories.indexOf("{{this.Question.Categorie.name}}")] == undefined)
                {
                    //new array for this category
                    data.categoriesValues[data.categories.indexOf("{{this.Question.Categorie.name}}")] = [];
                    satisfactionValues[data.categories.indexOf("{{this.Question.Categorie.name}}")] = [];
                }
                //add the category
                data.categoriesValues[data.categories.indexOf("{{this.Question.Categorie.name}}")].push({{this.value}});
                satisfactionValues[data.categories.indexOf("{{this.Question.Categorie.name}}")].push({{this.satisfaction}});
                {{/each}}

            var colors = [];
            var finalValues = [];

            for(let t of data.categoriesValues)
            {
                if(t.length==1)
                {
                    if(t[0]==-2)
                    {
                        finalValues.push(0);
                        colors.push("grey");

                    }
                    else if(t[0]==0)
                    {
                        finalValues.push(-1)
                        colors.push("lightblue");
                    }
                    else if(t[0]==-1)
                    {
                        finalValues.push(-1);
                        colors.push("grey");
                    }
                    else
                    {
                        finalValues.push(t[0]);
                        colors.push(getColor(t[0]));
                    }
                }
                else
                {
                    if(t[0]==-1 && t[1]==-1) // N/A + N/A
                    {
                        finalValues.push(-1);
                        colors.push("grey")
                    }

                    else if(t[0]==0 && t[1]==0) // Non réalisé + Non réalisé
                    {
                        finalValues.push(-1);
                        colors.push("lightblue")
                    }
                    else if((t[0]==-1 && t[1]==0) || (t[1]==-1 && t[0]==0)) // N/A + non réalisé
                    {
                        finalValues.push(-1);
                        colors.push("lightblue")
                    }
                    else if((t[0]==-1 && t[1]>0) || (t[1]==-1 && t[0]>0)) // N/A + autre
                    {
                        let val;
                        if(t[0]>0)
                        {
                            val=t[0];
                        }
                        else
                        {
                            val=t[1];
                        }
                        finalValues.push(val);
                        colors.push(getColor(val));
                    }

                    else if((t[0] == -2 && t[1] == -1) || (t[1] == -2 && t[0] == -1)) // pas de répone + N/A
                    {
                        finalValues.push(0);
                        colors.push("grey");
                    }
                    else if((t[0] == -2 && t[1] == 0) || (t[1] == -2 && t[0] == 0)) // pas de répone + Non réalisé
                    {
                        finalValues.push(-1);
                        colors.push("lightblue");
                    }

                    else if((t[0] == -2 && t[1] > 0) || (t[1] == -2 && t[0] > 0)) // pas de réponse + autre
                    {
                        let val;
                        if(t[0]>0)
                        {
                            val=t[0]
                        }
                        else
                        {
                            val=t[1]
                        }
                        finalValues.push(val);
                        colors.push(getColor(val));
                    }

                    else if(t[0]>=0 && t[1]>=0) // autre
                    {
                        finalValues.push((t[0]+t[1])/2);
                        colors.push(getColor((t[0]+t[1])/2))
                    }

                    else // pas de réponse + pas de réponse
                    {
                        finalValues.push(0);
                        colors.push("grey")
                    }
                }

            }

            var satisfactionColors = [];

            for(let s of satisfactionValues)
            {
                if(s.length==1)
                {

                        satisfactionColors.push(getSatisfactionColor(s[0]))

                }
                else
                {
                    if(s[0]==s[1]) // valeurs identiques
                    {
                        satisfactionColors.push(getSatisfactionColor(s[0]))
                    }
                    else if(s[0]==0 || s[1]==0) // un des deux n'est pas défini
                    {
                        if(s[0]==0)
                        {
                            satisfactionColors.push(getSatisfactionColor(s[1]))
                        }
                        else
                        {
                            satisfactionColors.push(getSatisfactionColor(s[0]))
                        }
                    }
                    else if((s[0]==1 && s[1]==2) || (s[0]==2 && s[1]==1)) // pas satisfait + plus ou moins satisfait
                    {
                        satisfactionColors.push("red")
                    }
                    else if((s[0]==1 && s[1]==3) || (s[0]==3 && s[1]==1)) // pas satisfait +  satisfait
                    {
                        satisfactionColors.push("orange")
                    }
                    else if((s[0]==2 && s[1]==3) || (s[0]==3 && s[1]==2)) // plus ou moins satisfait +  satisfait
                    {
                        satisfactionColors.push("green")
                    }
                    else // défaut
                    {
                        satisfactionColors.push("grey")

                    }
                }

            }


            function getColor (v) {
                if (v < 0) {
                    return 'grey';
                }
                else if (v < 4) {
                    return 'red';

                }
                else if (v < 7) {
                    return 'orange';

                }
                else {
                    return 'green';
                }
            }

            function getSatisfactionColor (v) {
                if (v == 0) {
                    return 'grey';
                }
                else if (v == 1) {
                    return 'red';

                }
                else if (v == 2) {
                    return 'orange';

                }
                else {
                    return 'green';
                }
            }


            var ctx = document.getElementById("myChart").getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.categories,
                    datasets: [{
                        label: 'Niveau de participation',
                        data: finalValues,
                        backgroundColor: colors,
                        borderColor: colors,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive:true,
                    legend:{
                        display:false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                autoSkip: false,
                                beginAtZero: true,
                                min:-1,
                                max:9
                            }
                        }],
                        xAxes: [{
                            ticks: {
                                autoSkip: false,

                            }
                        }]
                    }
                }
            });

        </script>
        <script>
            $('#satisfaction').click(function () {
                myChart.data.datasets[0].backgroundColor = satisfactionColors;
                myChart.data.datasets[0].borderColor = satisfactionColors;
                myChart.update();
            });

            $('#participation').click(function () {

                myChart.data.datasets[0].backgroundColor = colors;
                myChart.data.datasets[0].borderColor = colors;
                myChart.update();

            });


        </script>
    {{/inline}}

{{/baseLayout}}