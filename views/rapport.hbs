{{#> baseLayout }}
    {{#*inline "content-block"}}
        <div class="container">
        <div class="row">
            <div class="col-10">
                <h1 class="mb-4">{{i18n 'Rapport'}} - {{code}}</h1>
            </div>
            <div class="col-2">
                <div class="text-right mt-2">
                    <a href="test/{{code}}">
                        <button class="btn-primary btn">{{i18n 'Test'}}</button>
                    </a>
                </div>
            </div>
        </div>

        <!--tabs pour changer de mode de vue dans le rapport-->
        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" id="participation" data-toggle="tab" href="#participation-labels" role="tab"
                   aria-controls="participation-labels" aria-selected="true">{{i18n 'Accueil'}}</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="satisfaction" data-toggle="tab" href="#satisfaction-labels" role="tab"
                   aria-controls="satisfaction-labels" aria-selected="false">{{i18n 'Profil'}}</a>
            </li>
        </ul>
        <br>
        <div class="row">
            <div class="col-3">
                <!--legendes selon mode de vue dans le rapport-->
                <div class="tab-content" id="myTabContent">
                    <div class="tab-pane fade show active" id="participation-labels" role="tabpanel"
                         aria-labelledby="participation-tab">
                        <div class="legend green"></div> {{i18n 'Bonne participation'}}  <br>
                        <div class="legend orange"></div> {{i18n 'Moyenne participation'}} <br>
                        <div class="legend red"></div> {{i18n 'Faible participation'}} <br>
                        <div class="legend lightblue"></div> {{i18n 'Non réalisé'}} <br>
                        <div class="legend gray"></div> {{i18n 'Non applicable'}}<br>
                    </div>
                    <div class="tab-pane fade" id="satisfaction-labels" role="tabpanel"
                         aria-labelledby="satisfaction-tab">
                        <div class="legend green"></div> {{i18n 'Satisfait'}}<br>
                        <div class="legend orange"></div> {{i18n '+/- satisfait'}}<br>
                        <div class="legend red"></div> {{i18n 'Pas satisfait'}}<br>
                        <div class="legend gray"></div> {{i18n 'Satisfaction indéfinie'}}<br>
                    </div>
                </div>
            </div>
            <div class="col-9">
                <canvas id="myChart"></canvas>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
            <table id="reponseTable" class="table table-bordered">
                <thead class="thead-primary">
                <tr>

                    <th scope="col">{{i18n 'Catégorie'}}</th>
                    <th scope="col">{{i18n 'Questions'}}</th>
                    <th scope="col">{{i18n 'Réalisation'}}</th>
                    <th scope="col">{{i18n 'Type aide'}}</th>
                    <th scope="col">{{i18n 'Satisfaction'}}</th>

                </tr>
                </thead>
                <tbody>
                {{#each reponses}}
                    <tr>
                        <td class="cat-name" >{{this.Question.Categorie.name}}</td>
                        <td>{{this.Question.question}}</td>
                        <td class="rea-r{{this.value}}"></td>
                        <td class="aid-a{{this.value}}"></td>
                        <td class="sat-{{this.satisfaction}}"></td>

                    </tr>
                {{/each}}

                </tbody>
            </table>
            </div>
        </div>
        </div>


    {{/inline}}
    {{#*inline "scripts-block"}}
        <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.min.js"></script>

        <script>
            var data = [];
            //créé un tableau de categories uniques (sans doublons)
            data.categories = [];
                {{#each reponses}}
                //test si la categorie existe pas
                if (data.categories.indexOf("{{this.Question.Categorie.name}}") == -1) {
                    data.categories.push("{{this.Question.Categorie.name}}");
                }
                {{/each}}
            //initiation des valeurs par categorie
            data.categoriesValues = [];
            //initiation des satisfactions par categorie
            satisfactionValues = [];
                {{#each reponses}}
                //if the category is empty of values
                if (data.categoriesValues[data.categories.indexOf("{{this.Question.Categorie.name}}")] == undefined) {
                    //new array for this category
                    data.categoriesValues[data.categories.indexOf("{{this.Question.Categorie.name}}")] = [];
                    satisfactionValues[data.categories.indexOf("{{this.Question.Categorie.name}}")] = [];
                }
                //add the category
                data.categoriesValues[data.categories.indexOf("{{this.Question.Categorie.name}}")].push({{this.value}});
                satisfactionValues[data.categories.indexOf("{{this.Question.Categorie.name}}")].push({{this.satisfaction}});
                {{/each}}

            //init color array for the chart
            var colors = [];
            //init the final values for the chart (this array contain the unique value even if the categorie has 2 questions)
            var finalValues = [];

            for (let t of data.categoriesValues) {
                //if unique question for a category
                if (t.length == 1) {
                    if (t[0] == -2) {
                        finalValues.push(0);
                        colors.push("grey");

                    }
                    else if (t[0] == 0) {
                        finalValues.push(-1)
                        colors.push("lightblue");
                    }
                    else if (t[0] == -1) {
                        finalValues.push(-1);
                        colors.push("grey");
                    }
                    else {
                        finalValues.push(t[0]);
                        colors.push(getColor(t[0]));
                    }
                }
                //else id tw0 question for a category

                else {
                    if (t[0] == -1 && t[1] == -1) // N/A + N/A
                    {
                        finalValues.push(-1);
                        colors.push("grey")
                    }

                    else if (t[0] == 0 && t[1] == 0) // Non réalisé + Non réalisé
                    {
                        finalValues.push(-1);
                        colors.push("lightblue")
                    }
                    else if ((t[0] == -1 && t[1] == 0) || (t[1] == -1 && t[0] == 0)) // N/A + non réalisé
                    {
                        finalValues.push(-1);
                        colors.push("lightblue")
                    }
                    else if ((t[0] == -1 && t[1] > 0) || (t[1] == -1 && t[0] > 0)) // N/A + autre
                    {
                        let val;
                        if (t[0] > 0) {
                            val = t[0];
                        }
                        else {
                            val = t[1];
                        }
                        finalValues.push(val);
                        colors.push(getColor(val));
                    }

                    else if ((t[0] == -2 && t[1] == -1) || (t[1] == -2 && t[0] == -1)) // pas de répone + N/A
                    {
                        finalValues.push(0);
                        colors.push("grey");
                    }
                    else if ((t[0] == -2 && t[1] == 0) || (t[1] == -2 && t[0] == 0)) // pas de répone + Non réalisé
                    {
                        finalValues.push(-1);
                        colors.push("lightblue");
                    }

                    else if ((t[0] == -2 && t[1] > 0) || (t[1] == -2 && t[0] > 0)) // pas de réponse + autre
                    {
                        let val;
                        if (t[0] > 0) {
                            val = t[0]
                        }
                        else {
                            val = t[1]
                        }
                        finalValues.push(val);
                        colors.push(getColor(val));
                    }

                    else if (t[0] >= 0 && t[1] >= 0) // autre
                    {
                        finalValues.push((t[0] + t[1]) / 2);
                        colors.push(getColor((t[0] + t[1]) / 2))
                    }

                    else // pas de réponse + pas de réponse
                    {
                        finalValues.push(0);
                        colors.push("grey")
                    }
                }

            }

            var satisfactionColors = [];

            for (let s of satisfactionValues) {
                if (s.length == 1) {

                    satisfactionColors.push(getSatisfactionColor(s[0]))

                }
                else {
                    if (s[0] == s[1]) // valeurs identiques
                    {
                        satisfactionColors.push(getSatisfactionColor(s[0]))
                    }
                    else if (s[0] == 0 || s[1] == 0) // un des deux n'est pas défini
                    {
                        if (s[0] == 0) {
                            satisfactionColors.push(getSatisfactionColor(s[1]))
                        }
                        else {
                            satisfactionColors.push(getSatisfactionColor(s[0]))
                        }
                    }
                    else if ((s[0] == 1 && s[1] == 2) || (s[0] == 2 && s[1] == 1)) // pas satisfait + plus ou moins satisfait
                    {
                        satisfactionColors.push("red")
                    }
                    else if ((s[0] == 1 && s[1] == 3) || (s[0] == 3 && s[1] == 1)) // pas satisfait +  satisfait
                    {
                        satisfactionColors.push("orange")
                    }
                    else if ((s[0] == 2 && s[1] == 3) || (s[0] == 3 && s[1] == 2)) // plus ou moins satisfait +  satisfait
                    {
                        satisfactionColors.push("green")
                    }
                    else // défaut
                    {
                        satisfactionColors.push("grey")

                    }
                }

            }

            //return the good color for the value
            function getColor(v) {
                if (v < 0) {
                    return 'grey';
                }
                else if (v < 4) {
                    return 'red';

                }
                else if (v < 7) {
                    return 'orange';

                }
                else {
                    return 'green';
                }
            }
            //return the good color for the satisfaction

            function getSatisfactionColor(v) {
                if (v == 0) {
                    return 'grey';
                }
                else if (v == 1) {
                    return 'red';

                }
                else if (v == 2) {
                    return 'orange';

                }
                else {
                    return 'green';
                }
            }


            //chart definition
            var ctx = document.getElementById("myChart").getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.categories,
                    datasets: [{
                        label: "{{i18n 'Niveau de participation'}}",
                        data: finalValues,
                        backgroundColor: colors,
                        borderColor: colors,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    legend: {
                        display: false
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                autoSkip: false,
                                beginAtZero: true,
                                min: -1,
                                max: 9
                            }
                        }],
                        xAxes: [{
                            ticks: {
                                autoSkip: false,

                            }
                        }]
                    }
                }
            });

            //set the good color for the different chart modes
            $('#satisfaction').click(function () {
                myChart.data.datasets[0].backgroundColor = satisfactionColors;
                myChart.data.datasets[0].borderColor = satisfactionColors;
                myChart.update();
            });
            $('#participation').click(function () {

                myChart.data.datasets[0].backgroundColor = colors;
                myChart.data.datasets[0].borderColor = colors;
                myChart.update();

            });

            $(function(){

                $('.sat-1').html("{{i18n 'Insatisfait'}}");
                $('.sat-2').html("{{i18n '+/- satisfait'}}");
                $('.sat-3').html("{{i18n 'Satisfait'}}");

                $('.rea-r9').html("{{i18n 'Sans difficulté'}}");
                $('.aid-a9').html("{{i18n 'Sans aide'}}");

                $('.rea-r8').html("{{i18n 'Sans difficulté'}}");
                $('.aid-a8').html("{{i18n 'Aide technique / aménagement'}}");

                $('.rea-r7').html("{{i18n 'Avec difficulté'}}");
                $('.aid-a7').html("{{i18n 'Sans aide'}}");

                $('.rea-r6').html("{{i18n 'Sans difficulté'}}");
                $('.aid-a6').html("{{i18n 'Aide technique / aménagement'}}");

                $('.rea-r5').html("{{i18n 'Sans difficulté'}}");
                $('.aid-a5').html("{{i18n 'Aide humaine'}}");

                $('.rea-r3').html("{{i18n 'Avec difficulté'}}");
                $('.aid-a3').html("{{i18n 'Aide humaine'}}");

                $('.rea-r1').html("{{i18n 'Réalisé par substitution'}}");
                $('.aid-a1').html("-");

                $('.rea-r0').html("{{i18n 'Non réalisé'}}");
                $('.aid-a0').html("-");

                $('.rea-r-1').html("{{i18n 'Ne s\'applique pas'}}");
                $('.aid-a-1').html("-");

                var seen = {};
                $('#reponseTable td:first-child').each(function()
                {
                    var $this = $(this);
                    var index = $this.index();
                    var txt =  $this.text();
                    if (seen[index] === txt)
                    {
                        $($this.parent().prev().children()[index]).attr('rowspan', 2);
                        $this.hide();
                    }
                    else
                    {
                        seen[index] = txt;
                    }
                });

            })
        </script>

    {{/inline}}

{{/baseLayout}}